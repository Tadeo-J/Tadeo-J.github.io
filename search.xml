<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FreeRTOS Study</title>
      <link href="/2024/04/12/FreeRTOS/"/>
      <url>/2024/04/12/FreeRTOS/</url>
      
        <content type="html"><![CDATA[<h1 id="FreeRTOS知识"><a href="#FreeRTOS知识" class="headerlink" title="FreeRTOS知识"></a>FreeRTOS知识</h1><h2 id="什么是-FreeRTOS"><a href="#什么是-FreeRTOS" class="headerlink" title="什么是 FreeRTOS?"></a>什么是 FreeRTOS?</h2><ul><li>实时操作系统</li></ul><h2 id="FreeRTOS-特点？"><a href="#FreeRTOS-特点？" class="headerlink" title="FreeRTOS 特点？"></a>FreeRTOS 特点？</h2><ul><li>内核支持抢占式、合作式和时间片调度</li><li>支持Corex-M系列</li><li>占用存储小，内核4k-9k字节</li><li>移植性能好</li><li>任务与任务、任务与中断之间可以使用任务通知、消息队列、二值信号量、数值型信<br>号量、递归互斥信号量和互斥信号量进行通信和同步</li><li>具有优先级继承特性的互斥信号量</li><li>任务数量不限、任务优先级不限</li></ul><h2 id="任务管理"><a href="#任务管理" class="headerlink" title="任务管理"></a>任务管理</h2><h3 id="任务函数"><a href="#任务函数" class="headerlink" title="任务函数"></a>任务函数</h3><ul><li>C语言实现</li><li>必须返回void，并且带有一个void指针参数</li><li>每个任务不允许以任何方式从函数内返回</li><li>可以创建多个任务，任务之间独立，有自己的栈空间</li></ul><img src="/images/FreeRTOS/image-20240413152524989.png" alt="image-20240413152524989" style="zoom: 67%;" /><h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><ul><li><p>API</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BaseType_t <span class="title function_">xTaskCreate</span><span class="params">(TaskFunction_t pxTaskCode,</span></span><br><span class="line"><span class="params"><span class="type">const</span> <span class="type">char</span> * <span class="type">const</span> pcName,</span></span><br><span class="line"><span class="params"><span class="type">const</span> <span class="type">uint16_t</span> usStackDepth,</span></span><br><span class="line"><span class="params"><span class="type">void</span> * <span class="type">const</span> pvParameters,</span></span><br><span class="line"><span class="params">UBaseType_t uxPriority,</span></span><br><span class="line"><span class="params">TaskHandle_t * <span class="type">const</span> pxCreatedTask )</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="FreeRTOS系统配置"><a href="#FreeRTOS系统配置" class="headerlink" title="FreeRTOS系统配置"></a>FreeRTOS系统配置</h2><ul><li><p>FreeRTOS 的系统配置文件为 FreeRTOSConfig.h，可通过此文件完成系统配置和裁剪</p></li><li><p>栈溢出检测方法：</p><p>  ​<strong>钩子函数</strong></p><p>  ​<code>vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB-&gt;pcTaskName );</code>通过参数<code>pxCurrentTCB</code>和<code>pcTaskName </code>，开发者可以确定是哪个任务堆栈发生溢出，从而进行相应处理。需要注意的是，<strong>根据堆栈的溢出程度不同，这些参数本身可能也是不正确的</strong>，在这种情况下可以通过访问当前任务控制块<code>pxCurrentTCB</code>来获取堆栈溢出任务信息。</p><p>  ​<strong>每个任务都有自己的堆栈</strong></p><p>  ​（1）使用<code>xTaskCreate()</code>创建，则任务堆栈会自动从堆内存上创建；</p><p>  ​（2）使用<code>xTaskCreateStatic()</code>创建，则堆栈由开发者自己确定并提供。</p><p>  ​<strong>检测方法</strong></p><p>  ​（1）上下文切换时将会占用较多的堆栈，该方法通过不断检测堆栈指针是否指向有效空间，来确定是否溢出。<strong>在堆栈中，portSTACK_GROWTH确定栈增长的方向，指针会从高地址开始指向堆栈的顶部，然后随着堆栈的使用而递减</strong>，因此<code>pxCurrentTCB-&gt;pxTopOfStack &gt; pxCurrentTCB-&gt;pxStack</code>时，才表明发生栈溢出，之后调用钩子函数，通过<code>( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB-&gt;pcTaskName</code>参数，可以确定哪个任务出现堆栈溢出。优缺点：检测快，检测不全。</p>  <img src="/images/FreeRTOS/image-20240413145357135.png" alt="image-20240413145357135" style="zoom:50%;" />  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span>( ( configCHECK_FOR_STACK_OVERFLOW == 1 ) &amp;&amp; ( portSTACK_GROWTH &lt; 0 ) )</span></span><br><span class="line"><span class="comment">/* Only the current stack state is to be checked. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> taskCHECK_FOR_STACK_OVERFLOW()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* Is the currently saved stack pointer within the stack limit? */</span></span><br><span class="line"><span class="keyword">if</span>( pxCurrentTCB-&gt;pxTopOfStack &lt;= pxCurrentTCB-&gt;pxStack ) <span class="comment">// 从高到低增长</span></span><br><span class="line">&#123;</span><br><span class="line">vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB-&gt;pcTaskName );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* configCHECK_FOR_STACK_OVERFLOW == 1 */</span></span></span><br><span class="line"></span><br><span class="line">or：</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span>( ( configCHECK_FOR_STACK_OVERFLOW == 1 ) &amp;&amp; ( portSTACK_GROWTH &gt; 0 ) ) <span class="comment">// 从低到高增长</span></span></span><br><span class="line"><span class="comment">/* Only the current stack state is to be checked. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> taskCHECK_FOR_STACK_OVERFLOW()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* Is the currently saved stack pointer within the stack limit? */</span></span><br><span class="line"><span class="keyword">if</span>( pxCurrentTCB-&gt;pxTopOfStack &gt;= pxCurrentTCB-&gt;pxEndOfStack )</span><br><span class="line">&#123;</span><br><span class="line">vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB-&gt;pcTaskName );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* configCHECK_FOR_STACK_OVERFLOW == 1 */</span></span></span><br></pre></td></tr></table></figure></li></ul><p>​（2）在创建任务的时候会向任务堆栈填充一个已知的标记值，方法二会一直检测堆栈后面的几个 bytes(标记值)是否被改写，如果被改写的话就会调用堆栈溢出钩子函数。<strong>堆栈从高到低增长，则检测高地址上的标记值；堆栈从低到高增长，则检测低地址上的标记值。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span>( ( configCHECK_FOR_STACK_OVERFLOW &gt; 1 ) &amp;&amp; ( portSTACK_GROWTH &lt; 0 ) )</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> taskCHECK_FOR_STACK_OVERFLOW()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> * <span class="type">const</span> pulStack = ( <span class="type">uint32_t</span> * ) pxCurrentTCB-&gt;pxStack;</span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> ulCheckValue = ( <span class="type">uint32_t</span> ) <span class="number">0xa5a5a5a5</span>;</span><br><span class="line"><span class="keyword">if</span>( ( pulStack[ <span class="number">0</span> ] != ulCheckValue ) ||</span><br><span class="line">( pulStack[ <span class="number">1</span> ] != ulCheckValue ) ||</span><br><span class="line">( pulStack[ <span class="number">2</span> ] != ulCheckValue ) ||</span><br><span class="line">( pulStack[ <span class="number">3</span> ] != ulCheckValue ) )</span><br><span class="line">&#123;</span><br><span class="line">vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB-&gt;pcTaskName );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* #if( configCHECK_FOR_STACK_OVERFLOW &gt; 1 ) */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span>( ( configCHECK_FOR_STACK_OVERFLOW &gt; 1 ) &amp;&amp; ( portSTACK_GROWTH &gt; 0 ) )</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> taskCHECK_FOR_STACK_OVERFLOW()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int8_t</span> *pcEndOfStack = ( <span class="type">int8_t</span> * ) pxCurrentTCB-&gt;pxEndOfStack;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint8_t</span> ucExpectedStackBytes[] = &#123;tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,</span><br><span class="line">tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,</span><br><span class="line">tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,</span><br><span class="line">tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,</span><br><span class="line">tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE &#125;;</span><br><span class="line">pcEndOfStack -= <span class="keyword">sizeof</span>( ucExpectedStackBytes );</span><br><span class="line"><span class="comment">/* Has the extremity of the task stack ever been written over? */</span></span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">memcmp</span>( ( <span class="type">void</span> * ) pcEndOfStack, ( <span class="type">void</span> * ) ucExpectedStackBytes, \</span><br><span class="line"><span class="keyword">sizeof</span>( ucExpectedStackBytes) ) != <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB-&gt;pcTaskName );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>* </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello Tadeo!</title>
      <link href="/2024/04/11/Hello/"/>
      <url>/2024/04/11/Hello/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到Tadeo的博客空间！"><a href="#欢迎来到Tadeo的博客空间！" class="headerlink" title="欢迎来到Tadeo的博客空间！"></a>欢迎来到Tadeo的博客空间！</h1><ul><li>2024.04.11 这是我开始记录博客的时间！</li><li>加油！坚持下去！</li><li><img src="/images/Hello/test.jpg" alt="test" style="zoom:50%;" /></li><li><img src="/images/Hello/2024327162013.jpg" alt="2024327162013" style="zoom:50%;" /></li><li><img src="/images/Hello/test02.jpg" alt="test02"></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/11/hello-world/"/>
      <url>/2024/04/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
